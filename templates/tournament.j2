<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="/static/style.css">
    <style>
        .editable {
            border-collapse: collapse;
            margin-left: 1vw;
        }

        .editable th,
        .editable td {
            text-align: left;
            padding: .938rem;
        }

        .editable th.edit {
            background: #f8ff88;
            /* Editable cell background color */
        }

        .header {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            margin-bottom: 1.25em;
        }

        h1 {
            font-weight: bold;
            font-size: 2em;
            color: #264653;
            /* Header text color */
            margin-right: auto;
        }

        .table_results {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        table {
            font-weight: bold;
            color: #264653;
            /* Table text color */
            border: 1px solid black;
            border-collapse: collapse;
        }

        th,
        td {
            padding: 0.63em;
        }

        tr:hover {
            background: #EDD69C;
            /* Hover color */
        }

        #cell:hover {
            cursor: auto;
        }

        .results {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -khtml-user-select: none;
            -ms-user-select: none;
        }

        .join {
            position: absolute;
            top: 2%;
            right: 2%;
            /* Adjusted position */
            height: 2.2em;
            z-index: 2;
        }

        .join button {
            background: var(--dark-1);
            /* Button color */
            /* Button text color */
            border: none;
            border-radius: 3px;
            cursor: pointer;
            width: 100%;
            height: 100%;
            padding: 1em 1em;
        }

        .join button:hover {
            background: #ef9603;
            /* Button hover color */
        }

        a {
            text-decoration: underline;
        }

        tr {
            border: 1px solid black;
            border-collapse: collapse;
        }
    </style>

    <title>{{ tournament }}</title>
</head>

<body>
    <div class="header">
        <h1>{{ tournament | replace('_', ' ') }} Results</h1>
    </div>
    {% if is_logged and not joined %}
    <div class="join">
        <button name="Join" value="JOIN" onclick="join_tournament()">Join Tournament</button>
    </div>
    {% endif %}

    <div class="results">
        <table class="editable" id="table">
            <tr>
                <td>School</td>
                {% for event in events %}
                <td>{{event | replace('_', ' ') }}</td>
                {% endfor %}
            </tr>
            {% for row in data %}
            <tr class="row">
                {% for cell in row %}
                {% if loop.index0 == 0 %}
                <th id="cell"><a href="/teams/{{ cell }}">{{ cell | replace('_', ' ')}}</a></th>
                {% elif cell|string == 'None' %}
                <th id="cell"></th>
                {% else %}
                <th id="cell">{{ cell }}</th>
                {% endif %}
                {% endfor %}
            </tr>
            {% endfor %}
        </table>
        {% if is_to %}
        <div>
            <button class="save" onclick="save()">
                Save
            </button>
        </div>
        {% endif %}
    </div>
</body>

</html>

<script>

    // Verification of whether tournament organizer is editing:
    const is_to = "{{ is_to }}";
    console.log(is_to);
    if (is_to == "True") {
        document.getElementById("cell").style.cursor = "pointer"
        // (A) INITIALIZE - DOUBLE CLICK TO EDIT CELL
        window.addEventListener("DOMContentLoaded", () => {
            for (let cell of document.querySelectorAll(".editable th")) {
                cell.ondblclick = () => editable.edit(cell);
            }
        });

        let editable = {
            // (B) PROPERTIES
            selected: null,  // current selected cell
            value: "", // current selected cell value

            // (C) "CONVERT" TO EDITABLE CELL
            edit: cell => {
                // (C1) REMOVE "DOUBLE CLICK TO EDIT"
                cell.ondblclick = "";

                // (C2) EDITABLE CONTENT
                cell.contentEditable = true;
                cell.focus();

                // (C3) "MARK" CURRENT SELECTED CELL
                cell.classList.add("edit");
                editable.selected = cell;
                editable.value = cell.innerHTML;

                // (C4) PRESS ENTER/ESC OR CLICK OUTSIDE TO END EDIT
                window.addEventListener("click", editable.close);
                cell.onkeydown = evt => {
                    if (evt.key == "Enter" || evt.key == "Escape") {
                        editable.close(evt.key == "Enter" ? true : false);
                        return false;
                    }
                };
            },

            // (D) END "EDIT MODE"
            close: evt => {
                if (evt.target != editable.selected) {
                    // (D1) CANCEL - RESTORE PREVIOUS VALUE
                    if (evt === false) {
                        editable.selected.innerHTML = editable.value;
                    }

                    // (D2) REMOVE "EDITABLE"
                    window.getSelection().removeAllRanges();
                    editable.selected.contentEditable = false;

                    // (D3) RESTORE CLICK LISTENERS
                    window.removeEventListener("click", editable.close);
                    let cell = editable.selected;
                    cell.onkeydown = "";
                    cell.ondblclick = () => editable.edit(cell);

                    // (D4) "UNMARK" CURRENT SELECTED CELL
                    editable.selected.classList.remove("edit");
                    editable.selected = null;
                    editable.value = "";

                    // (D5) DO WHATEVER YOU NEED
                    if (evt !== false) {
                        console.log(cell.innerHTML);
                        // FIX THIS VERIFY THAT ONLY TO'S ARE EDITING
                        // FIX THIS MAKE IT SEND TO SERVER
                    }
                }
            }
        };
    }

    function save() {
        let data = []
        let table = document.getElementById("table")
        let rows = table.getElementsByTagName("tr")
        for (let i = 0; i < rows.length; i++) {
            let cells = rows[i].getElementsByTagName("th")
            let data_row = []
            for (let j = 0; j < cells.length; j++) {
                let cell = cells[j].textContent
                data_row.push(cell)
            }
            data.push(data_row)
        }

        route = "{{tournament}}"

        json_data = JSON.stringify(data.slice(1))

        const requestOptions = {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: json_data
        }

        fetch(route, requestOptions)
    }
    function join_tournament() {
        const url = String(window.location)

        const requestOptions = {
            method: "POST",
        };

        fetch(url, requestOptions).then(response => console.log('created tournament'))
        window.location.reload()
    }
</script>